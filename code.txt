sign in to Cruddur

Nyamekye Asford

nyamekyeasford@exampro.co
nyamekyeasford
Testing1234

confirmation code - 1234
append it under /activities/home

@app.route("/api/activities/notifications", methods=['GET'])
def data_notifications():
  data = NotificationsActivities.run()
  return data, 200

Week 2

Run pip install -r requirements.txt in /backend/flask

append under roll bar request

# @app.before_first_request
with app.app_context():
  def init_rollbar():
      """init rollbar module"""
      rollbar.init(
          # access token
          rollbar_access_token,
          # environment name
          'production',
          # server root directory, makes tracebacks prettier
          root=os.path.dirname(os.path.realpath(__file__)),
          # flask already sets up logging
          allow_logging_basic_config=False)

      # send exceptions from `app` to rollbar, using flask's signal system.
      got_request_exception.connect(rollbar.contrib.flask.report_exception, app)

      Week 3

      run npm i aws-amplify --save in /frontend-react

      export these variables

      REACT_AWS_PROJECT_REGION=
      REACT_APP_AWS_COGNITO_IDENTITY_POOL_ID=
      REACT_APP_AWS_COGNITO_REGION=
      REACT_APP_AWS_USER_POOLS_ID=
      REACT_APP_CLIENT_ID=

      vid 3

      run a pip install -r requirements.txt in /backendlask

      week 4



chmod u+x bin/create,drop,schema-load in backendlask

run pip install -r requirements.txt in backendflask



aws ec2 modify-security-group-rules \
    --group-id $DB_SG_ID \
    --security-group-rules "SecurityGroupRuleId=$DB_SG_RULE_ID,SecurityGroupRule={IpProtocol=tcp,FromPort=5432,ToPort=5432,CidrIpv4=$GITPOD_IP/32}"

    Week 5
    ensure dynamodb is running on docker compose 

    1. load schema load ddb
    2. chmod u+x list-tables in ddb
    3. load list-tables ddb
    4. load drop cruddur-message in ddb 
    8. ./bin/db/drop
    5. ./bin/db/create
    6. ./bin/db/schemaload
    7. ./bin/db/seed
    9. ./bin/ddb/seed
    10. ./bin/ddb/schemaload
    11. ./bin/ddb/list-tables
    12. ./bin/ddb/seed
    13. ./bin/ddb/scan
    14. chmod patterns in ddb 
    15. ./bin/ddb/patterns/get-conversation
    16. ./bin/ddb/patterns/list-conversations

    17. chmod u+x list-users in cognito folder
    18. export AWS_COGNITO_USER_POOL_ID="us-east-1_q0gJLXnNT"
        gp env AWS_COGNITO_USER_POOL_ID="us-east-1_q0gJLXnNT"
    19. ./bin/cognito/list-users
    20. ./bin/db/setup
    21. ./bin/cognito/list-users
    23. ./bin/db/update_cognito_user_id
    24. ./bin/ddb/schemaload
    25. ./bin/ddb/seed
    26. ./bin/ddb/patterns/list-conversations
    27. ./bin/db/connect
        INSERT INTO public.users (display_name, email, handle, cognito_user_id)
VALUES ('Londo Mollari', 'lmollari@centari.com','londo','MOCK');
    
    Week 6

    Test the DB connection 
    Test the Health Check
    aws logs create-log-group --log-group-name "/cruddur/fargate-cluster"
    aws logs put-retention-policy --log-group-name "/cruddur/fargate-cluster" --retention-in-days 1

    aws ecs create-cluster \
    --cluster-name cruddur \
    --service-connect-defaults namespace=cruddur

    aws ecr create-repository \
    --repository-name cruddur-python \
    --image-tag-mutability MUTABLE

    login into ecr 

    aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"

    export ECR_PYTHON_URL="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cruddur-python"
    echo $ECR_PYTHON_URL

    docker pull python:3.10-slim-buster

    docker tag python:3.10-slim-buster $ECR_PYTHON_URL:3.10-slim-buster

    docker push $ECR_PYTHON_URL:3.10-slim-buster

    docker image rm 837652279078.dkr.ecr.us-east-1.amazonaws.com/cruddur-python:3.10-slim-buster

    always login in the termainal youre using to access docker on aws before running docker

    login into ecr 

    aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"


    build the image again for backendflask

    aws ecr create-repository \
    --repository-name cruddur-python \
    --image-tag-mutability MUTABLE

    export ECR_BACKEND_FLASK_URL="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/backend-flask"
    echo $ECR_BACKEND_FLASK_URL

    docker build -t backend-flask .
    docker tag backend-flask:latest $ECR_BACKEND_FLASK_URL:latest
    docker push $ECR_BACKEND_FLASK_URL:latest
   
   aws iam create-role \
    --role-name CruddurServiceExecutionRole \
    --assume-role-policy-document file://aws/policies/service-execution-policy.json

    Delete cruddur CruddurServiceExecutionRole

    export OTEL_EXPORTER_OTLP_HEADERS="x-honeycomb-team=${HONEYCOMB_API_KEY}"
    gp env OTEL_EXPORTER_OTLP_HEADERS="x-honeycomb-team=${HONEYCOMB_API_KEY}"

aws ssm put-parameter --type "SecureString" --name "/cruddur/backend-flask/AWS_ACCESS_KEY_ID" --value $AWS_ACCESS_KEY_ID
aws ssm put-parameter --type "SecureString" --name "/cruddur/backend-flask/AWS_SECRET_ACCESS_KEY" --value $AWS_SECRET_ACCESS_KEY
aws ssm put-parameter --type "SecureString" --name "/cruddur/backend-flask/CONNECTION_URL" --value $PROD_CONNECTION_URL
aws ssm put-parameter --type "SecureString" --name "/cruddur/backend-flask/ROLLBAR_ACCESS_TOKEN" --value $ROLLBAR_ACCESS_TOKEN
aws ssm put-parameter --type "SecureString" --name "/cruddur/backend-flask/OTEL_EXPORTER_OTLP_HEADERS" --value "x-honeycomb-team=$HONEYCOMB_API_KEY"
